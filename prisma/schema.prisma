generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(uuid())
  name                 String
  username             String       @unique
  email                String       @unique
  phone                String?
  address              String?
  birthDate            String?
  joinDate             String
  role                 Role         @default(KARYAWAN)
  position             String
  department           String
  image                String?
  status               UserStatus
  lastLogin            DateTime?
  passwordHash         String
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  attendances          Attendance[]
  barcodes             Barcode[]
  surat                SuratKeluar[]
  approverSurat        Approver[]
  @@map("users")
}

model Attendance {
  id        String           @id @default(uuid())
  userId    String
  date      String
  clockIn   String
  clockOut  String?
  status    AttendanceStatus
  photoIn   String?
  photoOut  String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model AlatKalibrasi {
  id                 String   @id @default(uuid())
  nama_alat          String
  merek_model        String
  nomor_seri         String   @unique
  rentang_pengukuran String
  kelas_akurasi      String
  tanggal_kalibrasi  String
  tanggal_kadaluarsa String
  id_lokasi          String
  status             String
  foto               String?
  createdAt          DateTime @default(now())
}

model SparePart {
  id        String   @id @default(uuid())
  nama      String
  kode      String   @unique
  jumlah    Int
  lokasi    String
  supplier  String?
  foto      String?
  status    String
  createdAt DateTime @default(now())
}

model Barcode {
  id        String   @id @default(uuid())
  userId    String
  code      String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  OWNER
  DIREKTUR
  MANAJER
  KARYAWAN
  TEKNISI
}

enum UserStatus {
  AKTIF
  NONAKTIF
  DITANGGUHKAN
}

enum AttendanceStatus {
  TEPAT_WAKTU
  TERLAMBAT
  PULANG_CEPAT
}

model Surat {
  id          String   @id @default(uuid())
  jenis       JenisSurat
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tanggalMulai DateTime
  tanggalSelesai DateTime
  alasan      String
  lampiran    String?  
  status      StatusSurat @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  diagnosa    String?  
  tujuan      String?  
}

model SuratKeluar {  
  id          String     @id @default(uuid())
  jenisSurat  JenisSurat
  nomorSurat  String?
  tanggal     DateTime   @default(now())
  pemohon     User       @relation(fields: [userId], references: [id])
  userId      String
  status      StatusSurat @default(DRAFT)
  approvers   Approver[]
  data        Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  pdfUrl      String?
  catatan     String?
  lampiran    String[]

  @@index([userId])
  @@map("surat")  
}

model Approver {
  id          String      @id @default(uuid())
  surat       SuratKeluar @relation(fields: [suratId], references: [id], name: "ApproverToSuratKeluar")
  suratId     String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  level       Int
  status      ApproverStatus @default(PENDING)
  catatan     String?
  tanggal     DateTime    @default(now())

  @@unique([suratId, userId])
  @@map("approvers")
}


enum JenisSurat {
  IZIN_SAKIT
  PERJALANAN_DINAS
  CUTI
  TUGAS_LUAR
  UNDURAN
  LAINNYA
}

enum StatusSurat {
  DRAFT
  PENDING
  REVIEW_MANAGER
  REVIEW_DIRECTOR
  APPROVED
  REJECTED
  COMPLETED
}

enum ApproverStatus {
  PENDING
  APPROVED
  REJECTED
}